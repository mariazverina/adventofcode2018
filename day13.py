import copy

with open(__file__[:-2]+"txt", "r") as f:
    lines = f.readlines()
    lines = list(map(lambda x: list(x.strip('\n')), lines))

class World:
    cart_symbols = set("<>^v")
    cart_offsets = {">": (0, 1), "<": (0, -1), "^": (-1, 0), "v": (1, 0)}
    cart_road = dict(zip("v^<>", "||--"))
    # generated by {k:v for k,v in zip(list(zip(">><<^^vv", "/\\"*4)),"^vv^><<>")}
    redirect = {('>', '/'): '^', ('>', '\\'): 'v', ('<', '/'): 'v', ('<', '\\'): '^', ('^', '/'): '>',
                ('^', '\\'): '<', ('v', '/'): '<', ('v', '\\'): '>'}

    turns = [{'^': '<', '>': '^', 'v': '>', '<': 'v'},
             {'^': '^', '>': '>', 'v': 'v', '<': '<'},
             {'^': '>', '>': 'v', 'v': '<', '<': '^'}]

    def __init__(self, lines):
        self.tracks = lines
        self.h = len(lines)
        self.w = len(lines[0])
        self.detect_carts()
        self.t = 0
        self.collided = False

    def detect_carts(self):
        self.carts = {}
        for y in range(self.h):
            for x in range(self.w):
                c = self.tracks[y][x]
                if c in self.cart_symbols:
                    self.carts[(y, x)] = (c, 0)
                    self.tracks[y][x] = World.cart_road[c]

    def print(self):
        raster = copy.deepcopy(self.tracks)
        for y, x in self.carts.keys():
            raster[y][x] = self.carts[(y, x)][0]
        print('\n'.join(map(lambda x: ''.join(x), raster)))
        print('='*40)

    def sorted_carts(self):
        return sorted(world.carts.items())

    def tick(self):

        for (y,x), (c, mem) in self.sorted_carts():
            if not (y, x) in self.carts: # cart may have been deleted
                continue
            v = self.cart_offsets[c]
            ny, nx = y + v[0], x + v[1]
            road = world.tracks[ny][nx]
            if (c, road) in self.redirect:
                c = self.redirect[(c, road)]
            if road == '+':
                c = self.turns[mem][c]
                mem = (mem + 1) % 3
            del self.carts[(y, x)]
            if (ny, nx) in self.carts:
                self.collision = (ny, nx)
                if not self.collided:
                    print ("First collision: {},{}".format(nx, ny))
                    self.collided = True
                del self.carts[(ny, nx)]
            else:
                self.carts[(ny, nx)] = c, mem

        return len(self.carts) > 1
        # self.print()

        # print("T =", self.t)
        # self.print()
        self.t += 1
        return True


world = World(lines)

while world.tick():
    pass

y,x = next(iter(world.carts.keys()))
print ("Last cart: {},{}".format(x, y))


